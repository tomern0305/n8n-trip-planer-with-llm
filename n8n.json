{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "authentication": "airtableTokenApi",
        "baseId": {
          "__rl": true,
          "value": "appuxmMn9VM7Q1LRp",
          "mode": "id"
        },
        "tableId": {
          "__rl": true,
          "value": "tblAaCvGuoHoWUs5E",
          "mode": "id"
        },
        "triggerField": "Generated At",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.airtableTrigger",
      "typeVersion": 1,
      "position": [
        -40,
        35
      ],
      "id": "45290eb6-fd72-4bd3-96da-51868edc9a99",
      "name": "Airtable Trigger1",
      "credentials": {
        "airtableTokenApi": {
          "id": "EliHrNA16A3sV8Fy",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"model\": \"llama3-70b-8192\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a helpful travel assistant. Always reply with pure JSON. Do not include any explanation or extra text.\\n\\nFor each attraction, return:\\n- title\\n- description (max 2 lines)\\n- coordinates (latitude, longitude as string)\\n\\nDo NOT include any image URLs or references to Unsplash or any image service.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Give me 3 must-see attractions in {{ $json.fields.Location }} addditional requests from the user: {{ $json['User Feedback'] }}. Respond ONLY with JSON like:\\n[\\n  {\\n    \\\"title\\\": \\\"...\\\",\\n    \\\"description\\\": \\\"...\\\",\\n    \\\"coordinates\\\": \\\"latitude, longitude\\\"\\n  },\\n  ...\\n]\"\n    }\n  ]\n}\n",
        "headerParametersJson": "{\"Authorization\": \"Bearer YOUR-KEY\", \"Content-Type\": \"application/json\"}"
      },
      "name": "Ask Groq",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        180,
        40
      ],
      "id": "964f5da3-1e3b-43ae-b21d-a637d6bb1e76"
    },
    {
      "parameters": {
        "fromEmail": "YOUR-KEY",
        "toEmail": "={{$node[\"Airtable Trigger1\"].json[\"fields\"][\"User Email\"]}}",
        "subject": "Trip Advisor",
        "html": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1280,
        -40
      ],
      "id": "e321e6f8-d86e-4298-8f2e-91452748b656",
      "name": "Send Email1",
      "webhookId": "488cc440-21a0-4612-9947-eda3af9266d4",
      "credentials": {
        "smtp": {
          "id": "4yvMGFnHfeFnOh92",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const items = $input.all();\nconst location = items[0].json.location || \"Unknown Location\";\n\nlet html = `\n<html>\n  <head>\n    <title>Top attractions in ${location}</title>\n    <meta charset=\"UTF-8\" />\n    <style>\n      body {\n        margin: 0;\n        padding: 0;\n        background: #eef2f5;\n        font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n        color: #333;\n      }\n\n      .container {\n        max-width: 800px;\n        margin: auto;\n        padding: 30px 20px;\n        background: white;\n        border-radius: 16px;\n        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);\n      }\n\n      h2 {\n        text-align: center;\n        font-size: 2em;\n        margin-bottom: 30px;\n        color: #2c3e50;\n      }\n\n      .attraction {\n        text-align: center;\n        background: #fdfdfd;\n        padding: 20px;\n        border-radius: 12px;\n        margin-bottom: 30px;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n      }\n\n      .attraction h3 {\n        margin-top: 0;\n        font-size: 1.4em;\n        color: #1a73e8;\n      }\n\n      .attraction p {\n        margin: 10px 0;\n        font-size: 1em;\n      }\n\n      img {\n        max-width: 100%;\n        height: auto;\n        border-radius: 12px;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        margin-top: 10px;\n      }\n\n      .map-buttons {\n        margin-top: 12px;\n      }\n\n      .map-buttons a {\n        display: inline-block;\n        background: #1a73e8;\n        color: white;\n        padding: 10px 16px;\n        text-decoration: none;\n        border-radius: 8px;\n        margin: 5px;\n        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15);\n        transition: background 0.2s;\n      }\n\n      .map-buttons a:hover {\n        background: #0f5dc0;\n      }\n\n      a.button {\n        display: block;\n        text-align: center;\n        background: #28a745;\n        color: white;\n        padding: 12px 20px;\n        text-decoration: none;\n        border-radius: 8px;\n        width: fit-content;\n        margin: 40px auto 0;\n        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n        transition: background 0.2s;\n      }\n\n      a.button:hover {\n        background: #1f8c38;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h2>Here are travel tips for ${location}</h2>\n`;\n\nfor (const item of items) {\n  const { title, description, coordinates } = item.json;\n  const results = item.json.body?.results || item.json.results || [];\n  const imageUrl = results[0]?.urls?.regular || \"https://via.placeholder.com/800x600?text=No+Image\";\n\n  if (!coordinates || !coordinates.includes(',')) continue;\n\n  const [lat, lng] = coordinates.split(',').map(c => parseFloat(c.trim()));\n\n  const googleUrl = `https://www.google.com/maps/search/?api=1&query=${lat},${lng}`;\n  const osmUrl = `https://www.openstreetmap.org/?mlat=${lat}&mlon=${lng}#map=15/${lat}/${lng}`;\n  const wazeUrl = `https://waze.com/ul?ll=${lat},${lng}&navigate=yes`;\n\n  html += `\n    <div class=\"attraction\">\n      <h3>${title}</h3>\n      <p><strong>Description:</strong> ${description}</p>\n      <img src=\"${imageUrl}\" alt=\"${title}\" loading=\"lazy\" />\n      <div class=\"map-buttons\">\n        <a href=\"${googleUrl}\" target=\"_blank\">Google Maps</a>\n        <a href=\"${osmUrl}\" target=\"_blank\">OpenStreetMap</a>\n        <a href=\"${wazeUrl}\" target=\"_blank\">Waze</a>\n      </div>\n    </div>\n  `;\n}\n\nhtml += `\n      <a class=\"button\" href=\"${$execution.resumeFormUrl}\">Approve / Reject</a>\n    </div>\n  </body>\n</html>\n`;\n\nreturn [{\n  json: {\n    html,\n    location,\n    count: items.length\n  }\n}];\n"
      },
      "name": "Generate HTML1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1060,
        -40
      ],
      "id": "f68399a1-b236-4df6-a86a-0528c10e2838"
    },
    {
      "parameters": {
        "functionCode": "const location = $node[\"Airtable Trigger1\"].json.fields.Location;\nconst gptReply = $node[\"Ask Groq\"].json.choices[0].message.content;\n\nlet attractions;\ntry {\n  const cleanJson = gptReply.trim();\n  const jsonStart = cleanJson.indexOf('[');\n  const jsonEnd = cleanJson.lastIndexOf(']');\n  attractions = JSON.parse(cleanJson.slice(jsonStart, jsonEnd + 1));\n} catch (err) {\n  throw new Error(\"Failed to parse GPT response: \" + err.message);\n}\n\nreturn attractions.map(attr => ({\n  json: {\n    title: attr.title,\n    description: attr.description,\n    coordinates: attr.coordinates,\n    query: attr.title,\n    location\n  }\n}));"
      },
      "name": "Prepare Unsplash Queries",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        400,
        -40
      ],
      "id": "9c090e7a-7ca3-42be-9040-fb315da7c7bb"
    },
    {
      "parameters": {
        "url": "=https://api.unsplash.com/search/photos?query={{ $json.title }}&client_id=YOUR-KEY&per_page=1",
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "query",
              "value": "={{ $json.title }}"
            }
          ]
        }
      },
      "name": "Ask Unspalsh",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        620,
        60
      ],
      "id": "c9183c05-96e7-413c-b84d-5710377bbc4d"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        840,
        -40
      ],
      "id": "378712f4-c677-4970-b86b-383174a70c44",
      "name": "Merge"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "tomern0305",
          "mode": "list",
          "cachedResultName": "tomern0305",
          "cachedResultUrl": "https://github.com/tomern0305"
        },
        "repository": {
          "__rl": true,
          "value": "tomern0305.github.io",
          "mode": "list",
          "cachedResultName": "tomern0305.github.io",
          "cachedResultUrl": "https://github.com/tomern0305/tomern0305.github.io"
        },
        "filePath": "={{ $now }}.html",
        "fileContent": "={{ $('Generate HTML1').item.json.html }}",
        "commitMessage": "=test"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        1940,
        -140
      ],
      "id": "1075df56-86ae-4359-9cff-d13ef15d30b4",
      "name": "GitHub",
      "webhookId": "10538431-55c2-4ad3-9a76-1da92c78409e",
      "credentials": {
        "githubOAuth2Api": {
          "id": "gPvw0cJJdnReqlib",
          "name": "GitHub account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appuxmMn9VM7Q1LRp",
          "mode": "list",
          "cachedResultName": "Travel Requests",
          "cachedResultUrl": "https://airtable.com/appuxmMn9VM7Q1LRp"
        },
        "table": {
          "__rl": true,
          "value": "tblAaCvGuoHoWUs5E",
          "mode": "list",
          "cachedResultName": "Table 1",
          "cachedResultUrl": "https://airtable.com/appuxmMn9VM7Q1LRp/tblAaCvGuoHoWUs5E"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{$node[\"Airtable Trigger1\"].json[\"id\"]}}",
            "Status": "Approved",
            "HTML Link": "=http://htmlpreview.github.io/?{{ $json.content.download_url }}",
            "Approved At": "={{ $now }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Location",
              "displayName": "Location",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "User Email",
              "displayName": "User Email",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "Pending",
                  "value": "Pending"
                },
                {
                  "name": "Approved",
                  "value": "Approved"
                },
                {
                  "name": "Rejected",
                  "value": "Rejected"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "User Feedback",
              "displayName": "User Feedback",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "HTML Link",
              "displayName": "HTML Link",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Generated At",
              "displayName": "Generated At",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Approved At",
              "displayName": "Approved At",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2160,
        -140
      ],
      "id": "33a7a9e6-3536-4759-b1fb-b8bf6fac7126",
      "name": "Airtable",
      "credentials": {
        "airtableTokenApi": {
          "id": "EliHrNA16A3sV8Fy",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "resume": "form",
        "formTitle": "Approve / Reject",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Select Approve or Reject",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Approve"
                  },
                  {
                    "option": "Reject"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "If you reject you may add a reson "
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1500,
        -40
      ],
      "id": "6b88faa6-81ff-4cbb-97c7-3a3338201b22",
      "name": "Wait for form",
      "webhookId": "455ecd93-59ca-4880-92b1-7b2ebe8c5333"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json['Select Approve or Reject'] }}",
                    "rightValue": "Approve",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "f36eee59-73cf-494e-8597-a56a2f0a7f3b"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "795d4e14-1db5-490c-b2c1-70cf1b9530e4",
                    "leftValue": "={{ $json['Select Approve or Reject'] }}",
                    "rightValue": "Reject",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1720,
        -40
      ],
      "id": "7885098f-4361-40fb-8abd-4c4bfbb44054",
      "name": "Switch"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"model\": \"llama3-70b-8192\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a helpful travel assistant. Always reply with pure JSON. Do not include any explanation or extra text.\\n\\nFor each attraction, return:\\n- title\\n- description (max 2 lines)\\n- coordinates (latitude, longitude as string)\\n\\nDo NOT include any image URLs or references to Unsplash or any image service.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Give me 3 must-see attractions in {{ $json.fields.Location }}. Respond ONLY with JSON like:\\n[\\n  {\\n    \\\"title\\\": \\\"...\\\",\\n    \\\"description\\\": \\\"...\\\",\\n    \\\"coordinates\\\": \\\"latitude, longitude\\\"\\n  },\\n  ...\\n]\"\n    }\n  ]\n}\n",
        "headerParametersJson": "{\"Authorization\": \"Bearer YOUR-KEY\", \"Content-Type\": \"application/json\"}"
      },
      "name": "Ask Groq backup",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1540,
        180
      ],
      "id": "e89a5940-cdd1-43f0-88ff-0b49e4bf11f8"
    },
    {
      "parameters": {
        "functionCode": "const items = $input.all();\nconst location = items[0].json.location || \"Unknown Location\";\n\nlet html = `\n<html>\n  <head>\n    <title>Top attractions in ${location}</title>\n    <meta charset=\"UTF-8\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\"\n    />\n    <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n    <style>\n      body {\n        font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n        line-height: 1.6;\n        padding: 20px;\n        background: #f9f9f9;\n        color: #333;\n      }\n      h2 {\n        text-align: center;\n        color: #2c3e50;\n      }\n      .attraction {\n        background: white;\n        padding: 20px;\n        border-radius: 12px;\n        margin-bottom: 40px;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n      }\n      .attraction h3 {\n        margin-top: 0;\n        color: #1a73e8;\n      }\n      img {\n        max-width: 400px;\n        width: 100%;\n        height: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        margin-top: 10px;\n        display: block;\n      }\n      #map {\n        width: 100%;\n        max-width: 800px;\n        height: 400px;\n        margin: 0 auto 30px;\n        border-radius: 12px;\n        box-shadow: 0 4px 10px rgba(0,0,0,0.2);\n      }\n      a {\n        display: block;\n        text-align: center;\n        background: #1a73e8;\n        color: white;\n        padding: 12px 20px;\n        text-decoration: none;\n        border-radius: 8px;\n        width: fit-content;\n        margin: 20px auto;\n        box-shadow: 0 4px 10px rgba(0,0,0,0.2);\n      }\n    </style>\n  </head>\n  <body>\n    <h2>Here are travel tips for ${location}</h2>\n    <div id=\"map\"></div>\n`;\n\nconst markers = [];\n\nfor (const item of items) {\n  const { title, description, coordinates } = item.json;\n  const results = item.json.body?.results || item.json.results || [];\n  const imageUrl = results[0]?.urls?.regular || \"https://via.placeholder.com/800x600?text=No+Image\";\n\n  if (!coordinates || !coordinates.includes(',')) continue;\n\n  const [lat, lng] = coordinates.split(',').map(c => parseFloat(c.trim()));\n  markers.push({ lat, lng });\n\n  html += `\n    <div class=\"attraction\">\n      <h3>${title}</h3>\n      <p><strong>Description:</strong> ${description}</p>\n      <img src=\"${imageUrl}\" alt=\"${title}\" loading=\"lazy\" />\n    </div>\n  `;\n}\n\n// Inject the interactive Leaflet map\nhtml += `\n  <script>\n    var map = L.map('map');\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; OpenStreetMap contributors'\n    }).addTo(map);\n\n    var markers = [\n      ${markers.map(m => `L.marker([${m.lat}, ${m.lng}])`).join(',\\n')}\n    ];\n\n    var group = L.featureGroup(markers).addTo(map);\n    map.fitBounds(group.getBounds());\n  </script>\n`;\n\nhtml += `\n    <a href=\"${$execution.resumeFormUrl}\">Approve / Reject</a>\n  </body>\n</html>\n`;\n\nreturn [{\n  json: {\n    html,\n    location,\n    count: items.length\n  }\n}];\n"
      },
      "name": "Generate HTML backup",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1540,
        440
      ],
      "id": "00d4e5d9-38d3-4112-ad42-439f8f59d404"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appuxmMn9VM7Q1LRp",
          "mode": "list",
          "cachedResultName": "Travel Requests",
          "cachedResultUrl": "https://airtable.com/appuxmMn9VM7Q1LRp"
        },
        "table": {
          "__rl": true,
          "value": "tblAaCvGuoHoWUs5E",
          "mode": "list",
          "cachedResultName": "Table 1",
          "cachedResultUrl": "https://airtable.com/appuxmMn9VM7Q1LRp/tblAaCvGuoHoWUs5E"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{$node[\"Airtable Trigger1\"].json[\"id\"]}}",
            "Status": "Rejected",
            "User Feedback": "={{ $json['If you reject you may add a reson '] }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Location",
              "displayName": "Location",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "User Email",
              "displayName": "User Email",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "Pending",
                  "value": "Pending"
                },
                {
                  "name": "Approved",
                  "value": "Approved"
                },
                {
                  "name": "Rejected",
                  "value": "Rejected"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "User Feedback",
              "displayName": "User Feedback",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "HTML Link",
              "displayName": "HTML Link",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Generated At",
              "displayName": "Generated At",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Approved At",
              "displayName": "Approved At",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        1940,
        60
      ],
      "id": "3e51a2ee-d9ad-4889-94f0-0c091512b7c3",
      "name": "Airtable1",
      "credentials": {
        "airtableTokenApi": {
          "id": "EliHrNA16A3sV8Fy",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "base": {
          "__rl": true,
          "value": "appuxmMn9VM7Q1LRp",
          "mode": "list",
          "cachedResultName": "Travel Requests",
          "cachedResultUrl": "https://airtable.com/appuxmMn9VM7Q1LRp"
        },
        "table": {
          "__rl": true,
          "value": "tblAaCvGuoHoWUs5E",
          "mode": "list",
          "cachedResultName": "Table 1",
          "cachedResultUrl": "https://airtable.com/appuxmMn9VM7Q1LRp/tblAaCvGuoHoWUs5E"
        },
        "id": "={{ $json.id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2160,
        135
      ],
      "id": "e88ffa70-c5b3-4e4d-ba1c-8952e12b8ebb",
      "name": "Airtable2",
      "credentials": {
        "airtableTokenApi": {
          "id": "EliHrNA16A3sV8Fy",
          "name": "Airtable Personal Access Token account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Airtable Trigger1": {
      "main": [
        [
          {
            "node": "Ask Groq",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ask Groq": {
      "main": [
        [
          {
            "node": "Prepare Unsplash Queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate HTML1": {
      "main": [
        [
          {
            "node": "Send Email1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Unsplash Queries": {
      "main": [
        [
          {
            "node": "Ask Unspalsh",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Ask Unspalsh": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Generate HTML1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub": {
      "main": [
        [
          {
            "node": "Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable": {
      "main": [
        []
      ]
    },
    "Send Email1": {
      "main": [
        [
          {
            "node": "Wait for form",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for form": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "GitHub",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Airtable1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable1": {
      "main": [
        [
          {
            "node": "Airtable2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable2": {
      "main": [
        [
          {
            "node": "Ask Groq",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7f320ae1-5cef-4ead-b7f3-bcbdd3d60af0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1c3a4a8e337aa39d058184bfa7462a2b0d591285f13c920be4a41265ef49726d"
  },
  "id": "OItETPfivVHWT5ry",
  "tags": []
}